{"version":3,"file":"compatibility.js","sourceRoot":"","sources":["../../../../src/lib/core/compatibility/compatibility.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,EACL,QAAQ,EACR,SAAS,EACT,MAAM,EACN,QAAQ,EACR,SAAS,EACT,UAAU,EACV,cAAc,GACf,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,QAAQ,EAAC,MAAM,2BAA2B,CAAC;AACnD,OAAO,EAAC,OAAO,EAAC,MAAM,iBAAiB,CAAC;AAExC,MAAM,CAAC,IAAM,2BAA2B,GAAG,IAAI,cAAc,CAAU,uBAAuB,CAAC,CAAC;AAEhG,sFAAsF;AACtF,MAAM,CAAC,IAAM,sBAAsB,GAAG,IAAI,cAAc,CAAU,kBAAkB,CAAC,CAAC;AAEtF;;;GAGG;AACH;IAAuD,qDAAO;IAC5D,2CAAY,MAAc,EAAE,QAAgB;eAC1C,kBACE,WAAQ,MAAM,qEAAiE;aAC/E,yBAAsB,QAAQ,CAAC,WAAW,EAAE,gBAAY,CAAA,CACzD;IACH,CAAC;IACH,wCAAC;AAAD,CAAC,AAPD,CAAuD,OAAO,GAO7D;;AAED,iGAAiG;AACjG,MAAM,CAAC,IAAM,qBAAqB,GAAG,ooCA2DzB,CAAC;AAEb,iGAAiG;AACjG,MAAM,CAAC,IAAM,oBAAoB,GAAG,ykCA2DzB,CAAC;AAEZ,qEAAqE;AAErE,IAAa,iBAAiB;IAC5B,2BACmD,mBAA4B,EAC7E,UAAsB;QAEtB,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACzB,MAAM,IAAI,iCAAiC,CAAC,KAAK,EAAE,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACxF,CAAC;IACH,CAAC;IACH,wBAAC;AAAD,CAAC,AATD,IASC;AATY,iBAAiB;IAD7B,SAAS,CAAC,EAAC,QAAQ,EAAE,qBAAqB,EAAC,CAAC;IAGxC,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,2BAA2B,CAAC,CAAA;8CACpC,UAAU;GAHb,iBAAiB,CAS7B;SATY,iBAAiB;AAW9B,oEAAoE;AAEpE,IAAa,gBAAgB;IAC3B,0BACmD,mBAA4B,EAC7E,UAAsB;QAEtB,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACxB,MAAM,IAAI,iCAAiC,CAAC,IAAI,EAAE,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACvF,CAAC;IACH,CAAC;IACH,uBAAC;AAAD,CAAC,AATD,IASC;AATY,gBAAgB;IAD5B,SAAS,CAAC,EAAC,QAAQ,EAAE,oBAAoB,EAAC,CAAC;IAGvC,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,2BAA2B,CAAC,CAAA;8CACpC,UAAU;GAHb,gBAAgB,CAS5B;SATY,gBAAgB;AAY7B;;;;GAIG;AAQH,IAAa,mBAAmB;IAI9B,6BACwC,SAAc,EACR,oBAA6B;QADnC,cAAS,GAAT,SAAS,CAAK;QAJtD,gGAAgG;QACxF,yBAAoB,GAAG,KAAK,CAAC;QAMnC,EAAE,CAAC,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,oBAAoB,IAAI,SAAS,IAAI,SAAS,EAAE,CAAC,CAAC,CAAC;YACnF,4EAA4E;YAC5E,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QACnC,CAAC;IACH,CAAC;IAEO,2CAAa,GAArB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;YAC5B,OAAO,CAAC,IAAI,CACV,2DAA2D;gBAC3D,6DAA6D,CAC9D,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,yCAAW,GAAnB;QACE,EAAE,CAAC,CAAC,OAAO,gBAAgB,KAAK,UAAU,CAAC,CAAC,CAAC;YAC3C,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAExD,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACrD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YAE7C,EAAE,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC;gBACrD,OAAO,CAAC,IAAI,CACV,4DAA4D;oBAC5D,2DAA2D;oBAC3D,iEAAiE,CAClE,CAAC;YACJ,CAAC;YAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IACH,0BAAC;AAAD,CAAC,AA3CD,IA2CC;AA3CY,mBAAmB;IAP/B,QAAQ,CAAC;QACR,YAAY,EAAE,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;QACnD,OAAO,EAAE,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;QAC9C,SAAS,EAAE,CAAC;gBACV,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,IAAI;aAChD,CAAC;KACH,CAAC;IAMG,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,QAAQ,CAAC,CAAA;IAC5B,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,sBAAsB,CAAC,CAAA;;GANlC,mBAAmB,CA2C/B;SA3CY,mBAAmB;AA8ChC;;;GAGG;AAMH,IAAa,gCAAgC;IAA7C;IAA+C,CAAC;IAAD,uCAAC;AAAD,CAAC,AAAhD,IAAgD;AAAnC,gCAAgC;IAL5C,QAAQ,CAAC;QACR,SAAS,EAAE,CAAC;gBACV,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,IAAI;aACrD,CAAC;KACH,CAAC;GACW,gCAAgC,CAAG;SAAnC,gCAAgC","sourcesContent":["import {\n  NgModule,\n  Directive,\n  Inject,\n  Optional,\n  isDevMode,\n  ElementRef,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {MdError} from '../errors/error';\n\nexport const MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n\n/**\n * Exception thrown if the consumer has used an invalid Material prefix on a component.\n * @docs-private\n */\nexport class MdCompatibilityInvalidPrefixError extends MdError {\n  constructor(prefix: string, nodeName: string) {\n    super(\n      `The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n      `It was used on an \"${nodeName.toLowerCase()}\" element.`\n    );\n  }\n}\n\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-card-subtitle],\n  [mat-card-title],\n  [mat-dialog-actions],\n  [mat-dialog-close],\n  [mat-dialog-content],\n  [mat-dialog-title],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-menu-trigger-for],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [mat-tab-label],\n  [mat-tab-link],\n  [mat-tab-nav-bar],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-button-toggle,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-group,\n  mat-toolbar,\n  mat-error`;\n\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-card-subtitle],\n  [md-card-title],\n  [md-dialog-actions],\n  [md-dialog-close],\n  [md-dialog-content],\n  [md-dialog-title],\n  [md-fab],\n  [md-icon-button],\n  [md-menu-trigger-for],\n  [md-mini-fab],\n  [md-raised-button],\n  [md-tab-label],\n  [md-tab-link],\n  [md-tab-nav-bar],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-button-toggle,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-group,\n  md-toolbar,\n  md-error`;\n\n/** Directive that enforces that the `mat-` prefix cannot be used. */\n@Directive({selector: MAT_ELEMENTS_SELECTOR})\nexport class MatPrefixRejector {\n  constructor(\n    @Optional() @Inject(MATERIAL_COMPATIBILITY_MODE) isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw new MdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\n}\n\n/** Directive that enforces that the `md-` prefix cannot be used. */\n@Directive({selector: MD_ELEMENTS_SELECTOR})\nexport class MdPrefixRejector {\n  constructor(\n    @Optional() @Inject(MATERIAL_COMPATIBILITY_MODE) isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw new MdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\n}\n\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\n@NgModule({\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class CompatibilityModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  constructor(\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      // Delay running the check to allow more time for the user's styles to load.\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  private _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n}\n\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\n@NgModule({\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n})\nexport class NoConflictStyleCompatibilityMode {}\n"]}